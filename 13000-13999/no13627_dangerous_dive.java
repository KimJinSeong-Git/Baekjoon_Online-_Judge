/*
[ 문제 ]
- 최근 은로고니아에서 발생한 지진은 진앙인 수도의 건물에 큰 영향을 미치지 않았다. 
- 그러나 과학자들은 그것이 현재 지하 부분에 심각한 구조적 결함이 있는 제방 벽에 영향을 미쳤다는 것을 발견했습니다. 
- 이 벽은 신속하게 수리하지 않으면 제방의 붕괴를 일으켜 수도 전체를 범람시킬 수 있습니다.

- 수리는 다이버가 매우 어렵고 위험한 조건에서 깊은 수심에서 수행해야 합니다. 
- 그러나 도시의 생존이 위태로운 상황에서 많은 주민들이 이 위험한 임무에 자원하기 위해 나섰다.

- 위험한 임무에서 전통적으로, 각 다이버는 임무를 시작할 때 식별 번호가 있는 작은 카드를 받습니다. 
- 임무가 끝나면 자원 봉사자들은 명판을 반환하여 저장소에 보관했습니다.

- 제방은 다시 안전하지만 불행히도 일부 자원 봉사자는 임무에서 돌아 오지 않은 것 같습니다. 
- 당신은 저장소에 접시를 놓고 도시를 구하기 위해 목숨을 잃은 자원 봉사자를 결정하는 힘든 작업에 고용되었습니다.

[ 입력 ]
- 입력은 두 줄로 구성됩니다. 
- 첫 번째 줄에는 두 개의 정수 N과 R이 포함되어 있는데, 각각 미션에 갔던 자원 봉사자 수와 미션에서 돌아온 자원 봉사자 수를 나타냅니다. 
- 자원 봉사자는 1에서 N까지의 숫자로 식별됩니다. 
- 두 번째 줄에는 임무에서 돌아온 자원 봉사자를 나타내는 R 정수가 포함되어 있습니다(최소 한 자원 봉사자가 돌아옴).

제한

1 ≤ R ≤ N ≤ 10 4

[ 출력 ]
- 귀하의 프로그램은 임무에서 돌아오지 않은 자원 봉사자의 식별자를 식별 순서로 오름차순으로 포함하는 단일 행을 생성해야 합니다. 
- 각 식별자 뒤에 공백을 두십시오(따라서 줄의 마지막 식별자 뒤에 공백이 있어야 합니다). 
- 모든 자원 봉사자가 반환된 경우 줄에는 단일 문자 '*'(별표)가 포함되어야 합니다.
*/
import java.util.*;

public class no13627_dangerous_dive {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);

        int nbGo = sc.nextInt();
        int nbBack = sc.nextInt();
        int[] id = new int[nbGo];

        for(int i=0; i<nbBack; i++){
            int n = sc.nextInt();
            id[n-1] = 1;
        }

        if(nbGo == nbBack)
            System.out.println("*");
        else{
            for(int i=0; i<nbGo; i++){
                if(id[i] != 1)
                    System.out.print((i+1) + " ");
            }
        }
        sc.close();
    }
}
